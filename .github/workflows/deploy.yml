name: Deploy Backend to EC2

on:
  push:
    branches: [main, master]
    paths:
      - "backend/**" # Only trigger when backend files change
  pull_request:
    branches: [main, master]
    paths:
      - "backend/**"

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Run tests
        working-directory: ./backend
        run: npm test

      - name: Run test coverage
        working-directory: ./backend
        run: npm run test:coverage

  build-and-deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        working-directory: ./backend
        run: |
          docker build -t searchengine-backend:${{ github.sha }} .
          docker tag searchengine-backend:${{ github.sha }} searchengine-backend:latest

      - name: Save Docker image
        run: |
          docker save searchengine-backend:latest | gzip > backend-image.tar.gz

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            # Create app directory if it doesn't exist
            mkdir -p ~/app
            cd ~/app

            # Stop existing containers
            if [ -f docker-compose.yml ]; then
              docker-compose down || true
            fi

            # Clean up old images
            docker system prune -f

      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "backend/*"
          target: "~/app/"
          strip_components: 1

      - name: Copy Docker image to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          source: "backend-image.tar.gz"
          target: "~/app/"

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/app

            # Load Docker image
            docker load < backend-image.tar.gz

            # Create .env file from secrets
            cat > .env << EOL
            NODE_ENV=production
            PORT=3001
            MONGODB_URI=${{ secrets.MONGODB_URI }}
            DEBUG=searchengine:*
            EOL

            # Start the application
            docker-compose up -d --build

            # Clean up
            rm backend-image.tar.gz

            # Show running containers
            docker-compose ps

            echo "Deployment completed successfully!"
